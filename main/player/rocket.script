go.property("dir", vmath.vector3())
go.property("speed_multiplier", 1.0)
go.property("damage_multiplier", 1.0)
go.property("life_multiplier", 1.0)

local function explode(self)
	msg.post("#collisionobject", "disable")
	msg.post("#collisionexplode", "enable")
	self.exploding = true
	self.life = 1000
	go.set_rotation(vmath.quat())
	self.speed = 0
	sprite.play_flipbook("#sprite", "explosion")
end

function init(self)
	msg.post("#collisionexplode", "disable")

	self.speed = 750
	self.speed = self.speed * self.speed_multiplier

	self.damage = 1
	self.damage = self.damage * self.damage_multiplier

	self.life = 0.5
	self.life = self.life * self.life_multiplier
	
	self.explosion_damage = 0.05
	
	self.exploding = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local pos = go.get_position()
	pos = pos + self.dir * self.speed * dt
	go.set_position(pos)

	self.life = self.life - dt
	if self.life < 0 and not self.exploding then
		explode(self)
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") and not self.exploding then
		if message.other_group == hash("enemy") then
			msg.post(message.other_id, "take_damage", { amount = self.damage })
		end
		
		explode(self)
	end

	if message_id == hash("contact_point_response") and self.exploding then
		if message.other_group == hash("enemy") or message.other_group == hash("player") then
			msg.post(message.other_id, "take_damage", { amount = self.explosion_damage })
		end
	end

	-- Handle delete
	if message_id == hash("animation_done") then
		go.delete()
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
