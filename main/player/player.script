go.property("speed_multiplier", 1.0)
go.property("damage_multiplier", 1.0)
go.property("life_multiplier", 1.0)

local function reset_player(self)
	self.moving = false
	self.running = false
	self.firing = false
	self.invuln = false

	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)

	self.current_health = self.max_health

	self.attack_cooldown = false
	self.attack_cooldown_time = 0.3
	self.current_cooldown_time = self.attack_cooldown_time

	self.invuln_cooldown_time = 1.0

	self.speed_multiplier = 1.0
	self.damage_multiplier = 1.0
	self.life_multiplier = 1.0

	self.weapon_speed_multiplier = 1.0
	self.weapon_damage_multiplier = 1.0
	self.weapon_life_multiplier = 1.0

	self.current_anim = hash("player-down")

	self.paused = false

	update_health(self, 0)
	update_score(self, 0)
end

local function die(self)
	sound.play("/sound#player-die", { gain = 1.0, pan = 0 })
	
	--msg.post("#main", "reload")
	go.set_position(vmath.vector3(572, 614, 0))

	reset_player(self)
end

function update_health(self, amount)
	self.current_health =  self.current_health - amount
	self.max_health = self.base_health * self.life_multiplier

	msg.post("/guis#hud", "update_health", { amount = self.current_health / self.max_health })

	if self.current_health <= 0 then
		die(self)
		return
	end

	if amount < 2 then
		sound.play("#player-hit", { gain = 1.0, pan = 0 })
	else
		sound.play("#player-hurt", { gain = 1.0, pan = 0 })
	end
end

function update_score(self, amount)
	self.score = self.score + amount
	msg.post("/guis#hud", "update_score", { amount = self.score })
end

local function blink(self)
	self.invuln = true
	go.animate("#sprite", "tint", go.PLAYBACK_ONCE_PINGPONG, vmath.vector4(1, 0, 0, 1), go.EASING_LINEAR, self.invuln_cooldown_time, 0, function(self) self.invuln = false end)
end

local function take_damage(self, amount)
	if not self.invuln then
		update_health(self, amount)
		blink(self)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/camera#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.base_health = 10
	self.max_health = self.base_health
	self.max_stamina = 100
	self.speed = 250
	self.score = 0
	
	reset_player(self)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.attack_cooldown then
		self.current_cooldown_time = self.current_cooldown_time - dt

		if self.current_cooldown_time <= 0.0 then
			self.attack_cooldown = false
			self.current_cooldown_time = self.attack_cooldown_time
		end
	end
	
	if self.moving then
		if self.running then 
			self.speed = 350 * self.speed_multiplier
			go.set("#sprite", "playback_rate", 1.5)
		else
			self.speed = 250 * self.speed_multiplier
			go.set("#sprite", "playback_rate", 1)
		end
		
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	else
		go.set("#sprite", "playback_rate", 0)
	end

	local anim = nil

	if self.dir.x > 0 and math.abs(self.dir.x) >= math.abs(self.dir.y) then
		anim = hash("player-right")
	elseif self.dir.x < 0 and math.abs(self.dir.x) > math.abs(self.dir.y) then
		anim = hash("player-left")
	end
	if self.dir.y > 0 and math.abs(self.dir.y) >= math.abs(self.dir.x) then
		anim = hash("player-up")
	elseif self.dir.y < 0 and math.abs(self.dir.y) > math.abs(self.dir.x) then
		anim = hash("player-down")
	end

	if anim ~= self.current_anim and anim ~= nil then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir, speed_multiplier =  self.weapon_speed_multiplier,
		damage_multiplier =  self.weapon_damage_multiplier * self.damage_multiplier,
		life_multiplier =  self.weapon_life_multiplier}
		
		factory.create("#weapon_factory", nil, rot, props)
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		if message.other_group ~= hash("enemy") and message.other_group ~= hash("explosion") then
			local newpos = go.get_position() + message.normal * message.distance
			go.set_position(newpos)
		end
	end

	-- Take damage
	if message_id == hash("take_damage") then
		take_damage(self, message.amount)
	end

	-- Score
	if message_id == hash("score") then
		update_score(self, message.amount)
	end
end

function on_input(self, action_id, action)
	-- Pause
	if action_id == hash("pause") and action.pressed then
		self.paused = not self.paused
	end

	if self.paused then return end
	
	if action_id == hash("up") then
		self.input.y = action.value
	elseif action_id == hash("down") then
		self.input.y = -action.value
	elseif action_id == hash("left") then
		self.input.x = -action.value
	elseif action_id == hash("right") then
		self.input.x = action.value
	elseif action_id == hash("fire") and action.pressed and not self.attack_cooldown then
		self.firing = true
		self.attack_cooldown = true
	elseif action_id == hash("run") then
		if action.pressed then
			self.running = true
		elseif action.released then
			self.running = false
		end
	elseif action_id == hash("restart") and action.pressed then
		msg.post("/loader#loader", "restart")
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end