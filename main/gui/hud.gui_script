-- update radial/circle progress by changing the fill angle
local function update_radial(self, p)
	local node = gui.get_node("healthradial")
	local angle = p * 360 -- full circle is 360 degrees
	
	-- Animate the fill angle itself
	gui.animate(node, gui.PROP_FILL_ANGLE, angle, gui.EASING_INOUTQUAD, self.radial_duration)

	-- Animate  health radial color
	if angle > 180 then
		gui.animate(node, gui.PROP_COLOR, vmath.vector4(0, 1, 0, 1), gui.EASING_INOUTQUAD, 0.5)
	end

	if angle <= 180 and angle > 72 then
		gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 0, 1), gui.EASING_INOUTQUAD, 0.5)
	end
	
	if angle <= 72 then
		gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 0, 0, 1), gui.EASING_INOUTQUAD, 0.5)
	end
end

local function update_health(self, amount)
	local node = gui.get_node("health")
	update_radial(self, amount)
	--gui.set_text(node, "Health: " .. amount)
end

local function update_score(self, amount)
	local node = gui.get_node("score")
	gui.set_text(node, "Score: " .. amount)
end

local function update_xpBar(self, xp, total)

	local xpBar_node = gui.get_node("xp_bar")
	local size = gui.get_size(xpBar_node)
	local newAmount = (xp/total)*100
	size.x = newAmount
	gui.set_size(xpBar_node, size)

end

local function update_stamina_bar(self, amount, total)
	local stamina_bar_node = gui.get_node("stamina_bar")
	local size = gui.get_size(stamina_bar_node)
	local newAmount = (amount/total)*100
	size.x = newAmount
	gui.set_size(stamina_bar_node, size)
end

function on_message(self, message_id, message, sender)

	-- level
	if message_id == hash("update_level") then
		--update_xpBar(self, message.xp, message.total)
		local node = gui.get_node("level")
		gui.set_text(node, "Lvl " .. message.level)
	end
	
	-- xp
	if message_id == hash("update_xp") then
		update_xpBar(self, message.xp, message.total)
	end

	-- stamina
	if message_id == hash("update_stamina") then
		update_stamina_bar(self, message.amount, message.total)
	end

	-- pause
	if message_id == hash("pause_game") then
		local node = gui.get_node("pause")
		gui.set_visible(node, true)
	end
	--unpause
	if message_id == hash("unpause_game") then
		local node = gui.get_node("pause")
		gui.set_visible(node, false)
	end
	
	-- Health
	if message_id == hash("update_health") then
		update_health(self, message.amount)
	end

	-- Score
	if message_id == hash("update_score") then
		update_score(self, message.amount)
	end
	
end

function init(self)
	self.radial_duration = 0.4
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
