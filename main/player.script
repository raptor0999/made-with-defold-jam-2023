local function die()
	msg.post("#main", "reload")
end

local function take_damage(self, amount)
	self.current_health =  self.current_health - amount
	print(self.current_health)

	if self.current_health <= 0 then
		--die()
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/camera#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.moving = false
	self.running = false
	self.firing = false
	
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.max_health = 10
	self.current_health = self.max_health
	self.speed = 250
	self.score = 0
	self.current_anim = hash("player-down")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.moving then
		if self.running then 
			self.speed = 350
			go.set("#sprite", "playback_rate", 1.5)
		else
			self.speed = 250
			go.set("#sprite", "playback_rate", 1)
		end
		
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	else
		go.set("#sprite", "playback_rate", 0)
	end

	local anim = hash("player-down")

	if self.dir.x > 0 and math.abs(self.dir.x) > math.abs(self.dir.y) then
		anim = hash("player-right")
	elseif self.dir.x < 0 and math.abs(self.dir.x) > math.abs(self.dir.y) then
		anim = hash("player-left")
	elseif self.dir.y > 0 and math.abs(self.dir.y) > math.abs(self.dir.x) then
		anim = hash("player-up")
	elseif self.dir.y < 0 and math.abs(self.dir.y) > math.abs(self.dir.x) then
		anim = hash("player-down")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		
		factory.create("#rocket_factory", nil, rot, props)
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		local newpos = go.get_position() + message.normal * message.distance
		go.set_position(newpos)
	end

	-- Take damage
	if message_id == hash("take_damage") then
		take_damage(self, message.amount)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = action.value
	elseif action_id == hash("down") then
		self.input.y = -action.value
	elseif action_id == hash("left") then
		self.input.x = -action.value
	elseif action_id == hash("right") then
		self.input.x = action.value
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	elseif action_id == hash("run") then
		if action.pressed then
			self.running = true
		elseif action.released then
			self.running = false
		end
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end