local function explode(self)
	msg.post("#collisionobject", "disable")
	msg.post("#collisionexplode", "enable")
	self.exploding = true
	self.speed = 0
	go.set_rotation(vmath.quat())
	
	sprite.play_flipbook("#sprite", "explosion")
end

local function blink(self, time, color)
	go.animate("#sprite", "tint", go.PLAYBACK_LOOP_PINGPONG, color, go.EASING_LINEAR, time)
end

local function die(self)
	if not self.dead then
		msg.post("#collisionobject", "disable")
		msg.post("/player#player", "score", { amount =  self.score_amount })
		self.dead = true

		--send message to xp_manager
		msg.post("Systems#xp_manager", "enemy_update_xp", { xp =  self.xpWorth })
		
		go.delete()
	end
end

local function take_damage(self, amount)
	self.current_health =  self.current_health - amount

	if not self.det_inited then
		blink(self, self.blink_cooldown_time, vmath.vector4(1, 0, 0, 1))
	end

	if self.current_health <= 0 then
		die(self)
	end
end

local function init_det(self)
	self.det_inited = true
	self.current_det_init_time = self.det_init_time
	
	blink(self, self.current_det_init_time, vmath.vector4(1, 1, 0, 1))
end

function init(self)
	msg.post("#collisionexplode", "disable")
	self.moving = false
	self.running = false
	self.firing = false
	self.dead = false
	self.det_inited = false
	self.exploding = false

	self.xpWorth = 200--how much xp the player gains when killing this enemy
		
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 0, 0)
	self.max_health = 2
	self.current_health = self.max_health
	self.damage = 1
	self.score_amount = 200
	self.attack_cooldown = false
	self.attack_cooldown_time = 1.0
	self.current_cooldown_time = self.attack_cooldown_time
	self.blink_cooldown_time = 0.3
	self.speed = 200
	self.player_dist_activate = 1000
	self.det_init_dist = 200
	self.det_init_time = 2.0
	self.current_det_init_time = self.det_init_time
	self.current_anim = hash("robot-enemy-2-down")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	if _G.pause then return end

	if self.exploding then return end
	
	if self.attack_cooldown then
		self.current_cooldown_time = self.current_cooldown_time - dt

		if self.current_cooldown_time <= 0.0 then
			self.attack_cooldown = false
			self.current_cooldown_time = self.attack_cooldown_time
		end
	end

	if self.det_inited then
		self.current_det_init_time = self.current_det_init_time - dt

		if self.current_det_init_time <= 0.0 then
			explode(self)
		end
	end
		
	local player_pos = go.get_position("/player")
	local self_pos = go.get_position()
	local dist_from_player = vmath.length(player_pos - self_pos)
	
	if dist_from_player <= self.player_dist_activate then
		self.moving = true
		
		self.dir = vmath.normalize(player_pos - self_pos)
	end

	if dist_from_player <= self.det_init_dist and not self.det_inited then
		init_det(self)
	end
	
	if self.moving then
		if self.running then 
			self.speed = 150
			go.set("#sprite", "playback_rate", 1.5)
		else
			self.speed = 100
			go.set("#sprite", "playback_rate", 1)
		end
		
		self_pos = self_pos + self.dir * self.speed * dt
		go.set_position(self_pos)
	elseif not self.det_inited then
		go.set("#sprite", "playback_rate", 0)
	end

	if not self.det_inited then
		local anim = nil

		if self.dir.x >= 0 and math.abs(self.dir.x) >= math.abs(self.dir.y) then
			anim = hash("robot-enemy-2-right")
		elseif self.dir.x < 0 and math.abs(self.dir.x) > math.abs(self.dir.y) then
			anim = hash("robot-enemy-2-left")
		elseif self.dir.y >= 0 and math.abs(self.dir.y) > math.abs(self.dir.x) then
			anim = hash("robot-enemy-2-up")
		elseif self.dir.y < 0 and math.abs(self.dir.y) > math.abs(self.dir.x) then
			anim = hash("robot-enemy-2-down")
		end

		if anim ~= self.current_anim and anim ~= nil then
			msg.post("#sprite", "play_animation", { id = anim })
			self.current_anim = anim
		end
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }

		factory.create("#rocket_factory", nil, rot, props)
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		if message.other_group ~= hash("player") and message.other_group ~= hash("playerfire") and message.other_group ~= hash("explosion") then
			local newpos = go.get_position() + message.normal * message.distance
			go.set_position(newpos)
		end
		
		if message.other_group == hash("player") and not self.attack_cooldown then
			self.attack_cooldown = true
			msg.post(message.other_id, "take_damage", { amount = self.damage })
		end
	end

	-- Take damage
	if message_id == hash("take_damage") then
		take_damage(self, message.amount)
	end

	-- Handle delete
	if message_id == hash("animation_done") and self.exploding then
		go.delete()
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end